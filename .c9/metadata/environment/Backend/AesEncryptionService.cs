{"filter":false,"title":"AesEncryptionService.cs","tooltip":"/Backend/AesEncryptionService.cs","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":74,"column":0},"action":"insert","lines":["using System;","using System.Security.Cryptography;","using System.Text;","","public class AesEncryptionService","{","    private readonly byte[] _key; // 32 bytes = 256 bits","","    public AesEncryptionService(byte[] key)","    {","        if (key == null) throw new ArgumentNullException(nameof(key));","        if (key.Length != 32) throw new ArgumentException(\"La clave debe tener 32 bytes (256 bits).\");","        _key = key;","    }","","    // Encripta texto plano y devuelve Base64(nonce + tag + ciphertext)","    public string Encrypt(string plainText)","    {","        if (plainText == null) return null;","","        byte[] plaintextBytes = Encoding.UTF8.GetBytes(plainText);","","        // Nonce recomendado 12 bytes para AES-GCM","        byte[] nonce = new byte[12];","        RandomNumberGenerator.Fill(nonce);","","        // Tag de 16 bytes (128 bits)","        byte[] tag = new byte[16];","","        byte[] cipherBytes = new byte[plaintextBytes.Length];","","        using (var aesGcm = new AesGcm(_key))","        {","            aesGcm.Encrypt(nonce, plaintextBytes, cipherBytes, tag, null);","        }","","        // Output: nonce + tag + ciphertext (concatenado)","        byte[] outBytes = new byte[nonce.Length + tag.Length + cipherBytes.Length];","        Buffer.BlockCopy(nonce, 0, outBytes, 0, nonce.Length);","        Buffer.BlockCopy(tag, 0, outBytes, nonce.Length, tag.Length);","        Buffer.BlockCopy(cipherBytes, 0, outBytes, nonce.Length + tag.Length, cipherBytes.Length);","","        return Convert.ToBase64String(outBytes);","    }","","    // Recibe Base64(nonce + tag + ciphertext) y devuelve el texto plano","    public string Decrypt(string base64Input)","    {","        if (base64Input == null) return null;","","        byte[] input = Convert.FromBase64String(base64Input);","","        // Debe contener al menos nonce(12) + tag(16)","        if (input.Length < 12 + 16) throw new ArgumentException(\"Input invÃ¡lido para AES-GCM\");","","        byte[] nonce = new byte[12];","        byte[] tag = new byte[16];","        int cipherLen = input.Length - nonce.Length - tag.Length;","        byte[] cipherBytes = new byte[cipherLen];","","        Buffer.BlockCopy(input, 0, nonce, 0, nonce.Length);","        Buffer.BlockCopy(input, nonce.Length, tag, 0, tag.Length);","        Buffer.BlockCopy(input, nonce.Length + tag.Length, cipherBytes, 0, cipherBytes.Length);","","        byte[] plaintextBytes = new byte[cipherBytes.Length];","","        using (var aesGcm = new AesGcm(_key))","        {","            aesGcm.Decrypt(nonce, cipherBytes, tag, plaintextBytes, null);","        }","","        return Encoding.UTF8.GetString(plaintextBytes);","    }","}",""],"id":1}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":12,"column":19},"end":{"row":12,"column":19},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":23,"state":"start","mode":"ace/mode/csharp"}},"timestamp":1759174845965,"hash":"c90593540ff35637651596c26414fe541f3bcff5"}